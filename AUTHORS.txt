BROCARD Thimotee
-Parser : 
    Déclaration de var/type/fonc
    Accès aux var
    Détection des erreurs
-Code intermédiaire :
    NodeAssign, NodeOp, NodeNop
-Environemments
-Rapport

---------------------------------------------------------

EVEN Melvin
Environemments :
    - Implémentation de StackEnvironment
    - Utilisation du stack dans le parser
Parser : 
    - Toutes les règles (l'entièreté du parser)
    - Détection des erreurs (redéfinition de variables/fonctions, redéclaration de fonction, etc...)
Code intermédiaire : 
    - Code intermédiaire : NodeIf, NodeCallFct, NodeAssign, NodePtrAccess, NodeNew, NodeReturn, NodeId, NodeRel, NodeArrayAccess
    - L'affichage en .dot du code intermédiaire
    - Linéarisation de l'arbre de code intermédiaire
Scanner : 
    - Mots clés et opérateurs
    - Le mode débug du scanner
    - Une partie du scanner

---------------------------------------------------------

LESNE Nathan
- Scanner :
    - Utilisation des  états
    - Gestion des strings et des nombres Héxadécimaux/Octaux
    - Mode débug
    - Ponctuation

- Création + utilisation des Exceptions
- Enums dans NodeRel et NodeOp
- Code intermédiaire :
    - NodeCase, NodeSwitch

---------------------------------------------------------

TOY-RIONT--LE DOSSEUR Maelle
Parser :
    - Traitement des règles du parser
    - Traitement des arguments des fonctions avec la pile
    - Résolution de bugs et problèmes de précédence
    - Traitement des programmes dans le parser (programmes 1 à 8)
    - Gestion de l'ambiguité avec dandling if/else
Code intermédiaire :
    - NodeIf, NodeWhile, NodeSwitch, NodeCallFct, NodeAssign, NodeOp, NodePtrAccess, NodeArrayAccess
    - Linéarisation de l'arbre de code intermédiaire
    - Résolution de bugs dans le code intermédiaire
Autre :
    - Refactoring du code
    - Gestion de l'affichage de l'arbre du code intermédiaire (résolution de bugs)
    - Réflexion autours des choix d'implémentation
