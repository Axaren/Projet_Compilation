%package "ubordeaux.deptinfo.compilation.project.main";
%class "ParserLea";
%import "ubordeaux.deptinfo.compilation.project.node.*";
%import "ubordeaux.deptinfo.compilation.project.type.*";
%import "ubordeaux.deptinfo.compilation.project.environment.*";
%import "ubordeaux.deptinfo.compilation.project.exceptions.*";
%import "java.util.ArrayList";
%import "java.util.Iterator";

%embed {: 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
			System.err.format("*** " + msg + " ligne %d, colonne %d\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()));
	}
		
	private Environment typeEnvironment = new Environment("types");
	private Environment procedureEnvironment = new Environment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;
	
:};

%init {: 
	report = new Events();
:};

// KEYWORDS
%terminals TOKEN_TYPE, TOKEN_STRING, TOKEN_INTEGER, TOKEN_BOOLEAN, TOKEN_ARRAY, TOKEN_OF, TOKEN_STRUCT;
%terminals TOKEN_VAR, TOKEN_PROCEDURE, TOKEN_FUNCTION, TOKEN_BEGIN, TOKEN_END, TOKEN_NEW, TOKEN_DISPOSE;
%terminals TOKEN_PRINTLN, TOKEN_READLN, TOKEN_RETURN, TOKEN_IF, TOKEN_THEN, TOKEN_ELSE, TOKEN_WHILE, TOKEN_DO;
%terminals TOKEN_SWITCH, TOKEN_CASE, TOKEN_DEFAULT;

// PONCTS
%terminals TOKEN_SEMIC, TOKEN_DOTDOT, TOKEN_COLON, TOKEN_COMMA;
%terminals TOKEN_LPAR, TOKEN_RPAR, TOKEN_LBRACKET, TOKEN_RBRACKET, TOKEN_LBRACE, TOKEN_RBRACE;

// OPERATORS
%terminals TOKEN_AFF, TOKEN_CIRC;
%terminals TOKEN_PLUS, TOKEN_MINUS, TOKEN_TIMES, TOKEN_DIV;
%terminals TOKEN_AND, TOKEN_OR, TOKEN_NOT;
%terminals TOKEN_LT, TOKEN_LE, TOKEN_GT, TOKEN_GE, TOKEN_EQ, TOKEN_NE;

// LITERALS
%terminals TOKEN_IDENTIFIER, TOKEN_LIT_INTEGER, TOKEN_LIT_STRING, TOKEN_TRUE, TOKEN_FALSE, TOKEN_NULL;

%right UNARY_MINUS;
%right TOKEN_ELSE, TOKEN_IF;
%left TOKEN_TIMES, TOKEN_DIV;
%left TOKEN_PLUS, TOKEN_MINUS;
%left TOKEN_NOT;
%left TOKEN_AND;
%left TOKEN_OR;
%left TOKEN_LT, TOKEN_GT, TOKEN_GE, TOKEN_LE;
%left TOKEN_EQ, TOKEN_NE;

%typeof TOKEN_LIT_INTEGER = "Integer";
%typeof TOKEN_LIT_STRING, TOKEN_IDENTIFIER, TOKEN_PRINTLN, TOKEN_READLN = "String";
%typeof TOKEN_TRUE, TOKEN_FALSE = "Boolean";
%typeof TOKEN_NULL = "TypeVoid";
%typeof TOKEN_INTEGER = "TypeInt";
%typeof TOKEN_STRING = "TypeString";
%typeof TOKEN_BOOLEAN = "TypeBoolean";

%typeof type = "Type";
%typeof simple_type = "TypeAtomic";
%typeof array_type = "TypeArray";
%typeof range_type, subrange_type = "TypeRange";
%typeof pointer_type = "TypePointer";
%typeof structure_type = "TypeStruct";
%typeof feature_list_type = "TypeFeatureList";
%typeof feature_type, argt = "TypeFeature";
%typeof argt_list = "TypeTuple";
%typeof named_type = "TypeTemplate";
%typeof enumerated_type, init_enumerated_type = "TypeEnumRange";
%typeof identifier_list = "IdentifierList";

%typeof statement, structured_statement = "Node";
%typeof new_statement = "NodeNew";
%typeof dispose_statement = "NodeDispose";
%typeof return_statement = "NodeReturn";
%typeof if_statement = "NodeIf";
%typeof while_statement = "NodeWhile";
%typeof switch_statement = "NodeSwitch";
%typeof case_statement_list = "NodeCaseList";
%typeof case_statement = "NodeList";
%typeof case_default = "NodeCase";
%typeof variable_access, expression = "NodeExp";
%typeof procedure_definition = "Node";
%typeof procedure_definition_head, procedure_declaration_head = "NodeId";
%typeof type_declaration = "NodeId";
%typeof procedure_definition_list = "NodeList";
%typeof expression_list, variable_declaration, variable_declaration_list = "NodeList";
%typeof variable_declaration_part, type_declaration_list, type_declaration_part, procedure_definition_part = "NodeList";
%typeof statement_list, block, program = "NodeList";
%typeof literal = "NodeLiteral";

%goal program;

/***
* Semantique A completer
*
* Quelques astuces:
*
* a) ne mettez jamais de lettres accentuees, Beaver ne fonctionnerait pas
*
* b) quand vous souhaitez mettre du code avant la fin de la regle, 
*     X= A {: je voudrais mettre du code ici :} B {: pour l'exploiter ici :}
* utilisez une rege vide comme ceci:
*
*     X= A empty_X B {: pour l'exploiter ici  :} ;
*     empty_X= {: je voudrais mettre du code ici :};
*
* c) pour implementer une liste, faites comme ceci:
* xxx_list=
*	xxx_list.list xxx.elt {: list.add(elt); return list; :}
*	| xxx.elt {: MyList list = new MyList(); list.add(elt); return list; :}
*	;
*	
*
***/

program=
	program_begin
	type_declaration_part.td
	variable_declaration_part.vd 
	procedure_definition_part.pd
	TOKEN_BEGIN
	statement_list.stm
	TOKEN_END
	program_end
	{:
	 	NodeList prog = new NodeList(); 
		if (td.size() != 0)	prog.add(td); 
		if (vd.size() != 0)	prog.add(vd); 
		if (pd.size() != 0)	prog.add(pd); 
		prog.add(stm);
		return prog; 
	:}
	;

program_begin = {: stackEnvironment.newScope(); return new NodeNop(); :};
program_end = {: stackEnvironment.removeScope(); return new NodeNop(); :};

///////////////////////
// TYPE DECLARATION  //
///////////////////////
	
type_declaration_part= 
	/* empty */	{: return new NodeList(); :}
	| TOKEN_TYPE type_declaration_list
	;
	
type_declaration_list=
	type_declaration_list.lst type_declaration.t {: lst.add(t); return lst; :} 
	| type_declaration.t {: NodeList lst =  new NodeList(t); return lst; :}
	;
	
type_declaration=
	type_declaration_head.th TOKEN_AFF type.t TOKEN_SEMIC {: 
		if (typeEnvironment.get(th) != null)
			throw new VariableRedeclarationException("Type variable already exists");
		else
			typeEnvironment.put(th, t); 
		return new NodeId(th, t); 
	:}
	;
	
type_declaration_head=
	TOKEN_IDENTIFIER
	;
	
type=
	simple_type.t
	| named_type		
	| index_type
	| array_type.t 
	| pointer_type
	| structure_type
	;
	
simple_type=
	TOKEN_STRING {: return new TypeString(); :}
	| TOKEN_INTEGER {: return new TypeInt(); :}
	| TOKEN_BOOLEAN {: return new TypeBoolean(); :}
	;
	
named_type=
	TOKEN_IDENTIFIER.i {: return new TypeTemplate(i); :}
	;
	
index_type=
	enumerated_type
	| subrange_type
	;
	
enumerated_type=
	init_enumerated_type.enm TOKEN_LPAR identifier_list.ids TOKEN_RPAR {:
		Iterator<String> it = ids.iterator();
		int count = 0;
		TypeItemEnum first = null;
		TypeItemEnum last = null;
		while (it.hasNext()) { /* add the enum values to the env (global var) */
			String id = it.next();
			last = new TypeItemEnum(count, enm.getName());
			if (count == 0) first = last;
			stackEnvironment.addToCurrentScope(id, last);
			count++;
		}
		enm.setFirst(first);
		enm.setLast(last);
		return enm;
	:}
	;
	
init_enumerated_type= {: return new TypeEnumRange(); :};

subrange_type= 
	TOKEN_LIT_INTEGER.i1 TOKEN_DOTDOT TOKEN_LIT_INTEGER.i2 {: return new TypeArrayRange(new TypeInt(i1), new TypeInt(i2)); :}
	| TOKEN_IDENTIFIER.s1 TOKEN_DOTDOT TOKEN_IDENTIFIER.s2 {: 
		Type t1 = stackEnvironment.getType(s1);
		Type t2 = stackEnvironment.getType(s2);
		if (t1 == null || t2 == null) 
			throw new UnknownVariableException("Unrecognized identifier: "+s1+" or "+s2);
		return new TypeArrayRange(t1, t2); 
	:}
	;
	
array_type=
	TOKEN_ARRAY TOKEN_LBRACKET range_type.t1 TOKEN_RBRACKET TOKEN_OF type.t2 {:
	  return new TypeArray(t1, t2);
	:}
	;
	
range_type=
	enumerated_type
	| subrange_type
	| named_type.t {:
		TypeRange range = (TypeRange)typeEnvironment.get(t.getName());
		if (range == null)
			throw new UnknownTypeException("Unrecognized TypeRange: "+t.getName());
		return range; 
	:}
	;
	
pointer_type=
	TOKEN_CIRC type.t {: return new TypePointer(t); :}
	;
	
structure_type=
	TOKEN_STRUCT TOKEN_LBRACE feature_list_type.t TOKEN_RBRACE {: return new TypeStruct(t); :}
	;
	
feature_list_type=
	feature_list_type.l feature_type.t {: l.add(t); return l; :}
	| feature_type.t {: TypeFeatureList l = new TypeFeatureList(t); return l; :}
	;
	
feature_type=
	TOKEN_IDENTIFIER.i TOKEN_COLON type.t TOKEN_SEMIC {: return new TypeFeature(i, t); :}
	;
	
///////////////////////////
// VARIABLE DECLARATION  //
///////////////////////////

variable_declaration_part= 
	/* empty */ 
	| TOKEN_VAR variable_declaration_list.l {: return l; :} 
	;
	
variable_declaration_list=
	variable_declaration_list.l variable_declaration.d {: 
		Iterator<Node> it = d.iterator();
		while (it.hasNext()) {
			l.add(it.next());
		}
		return l;
	:}
	| variable_declaration.d {: return d; :}
	;
	
variable_declaration=
	identifier_list.l TOKEN_COLON type.t TOKEN_SEMIC {:
		NodeList decl = new NodeList();
		for (String i : l) {
			if (stackEnvironment.existsInScope(i)) 
				throw new VariableRedeclarationException("Identifer redeclared: "+ i);
			else {
				stackEnvironment.addToCurrentScope(i, t);
				decl.add(new NodeId(i, t));
			}
		}
		return decl;
	:}
	;
	
identifier_list=
	identifier_list.l TOKEN_COMMA TOKEN_IDENTIFIER.i {: l.add(i); return l; :}
	| TOKEN_IDENTIFIER.i {: IdentifierList l = new IdentifierList(i); return l; :}
	;

//////////////////////////
// PROCEDURE DEFINITION //
//////////////////////////
	
procedure_definition_part=
	/* empty*/ {: return new NodeList(); :}
	| procedure_definition_list.lst {: return lst; :}
	;
	
procedure_definition_list=
	procedure_definition_list.lst procedure_definition.d {: lst.add(d); return lst; :}
	| procedure_definition.d {: NodeList lst = new NodeList(d); return lst; :}
	;
	
procedure_definition=
	procedure_definition_head.h block.stm {: 
		TypeFunct type = (TypeFunct)h.getType();
		TypeFunct type2 = (TypeFunct)procedureEnvironment.get(h.getName());
		if (type2 != null && type2.getDefined()) 
			throw new FunctionRedefinitionException("Function already defined : " + h.getName());
		else {
			if (type2 != null)
				type2.setDefined(true);
			else 
				procedureEnvironment.put(h.getName(), type);
		}
		return h; 
	:}
	| procedure_declaration_head.h TOKEN_SEMIC {: 
		if (procedureEnvironment.get(h.getName()) != null)
			throw new FunctionRedeclarationException("Function already declared : " + h.getName());
		else 
			procedureEnvironment.put(h.getName(), h.getType());
		return h; 
	:}
	;

procedure_definition_head=
	procedure_head 
	;
	
procedure_declaration_head=
	procedure_head 
	;

procedure_head=
	TOKEN_PROCEDURE TOKEN_IDENTIFIER.i TOKEN_LPAR argt_part.args TOKEN_RPAR {: 
		TypeFunct type = new TypeFunct(i, args, new TypeVoid()); 
		return new NodeId(i, type);
	:}
	| TOKEN_FUNCTION TOKEN_IDENTIFIER.i TOKEN_LPAR argt_part.args TOKEN_RPAR TOKEN_COLON type.t {:
		TypeFunct type = new TypeFunct(i, args, t);
		return new NodeId(i, type);
	:}
	;

argt_part=
	/* empty */
	| argt_list
	;

argt_list=
	argt_list.lt TOKEN_COMMA argt.t {: lt.add(t); return lt;  :}
	| argt.t {: TypeTuple nl = new TypeTuple(t); return nl; :}
	;

argt=
	TOKEN_IDENTIFIER.i TOKEN_COLON type.t
	{:
        NodeList decl = new NodeList();
        stackEnvironment.addToCurrentScope(i, t);
        decl.add(new NodeId(i, t));
        return new TypeFeature(i, t);
    :}
	;
	
block=
	block_begin
	variable_declaration_part /** TODO: add to tree **/
	TOKEN_BEGIN	
	statement_list.stmList
	TOKEN_END 			
	block_end
	{: return stmList; :}		
	;

block_begin = {: stackEnvironment.newScope(); return new NodeNop(); :};

block_end = {: stackEnvironment.removeScope(); return new NodeNop(); :};

//////////////////////////////
// STATEMENTS & EXPRESSIONS //
//////////////////////////////

statement_list=
	statement_list.stmList statement.stm {: stmList.add(stm); return stmList; :}
	| statement.stm {: NodeList stmList = new NodeList(stm); return stmList; :}
	;

statement=
    simple_statement
	| structured_statement
	;

simple_statement=
	assignment_statement
	| procedure_statement
	| new_statement
	| dispose_statement
	| println_statement
	| readln_statement
	| return_statement
	;
	
assignment_statement=
	variable_access.va TOKEN_AFF expression.e TOKEN_SEMIC {: return new NodeAssign(va, e); :}
	;
	
procedure_statement=
	procedure_expression.pe TOKEN_SEMIC {: return pe; :}
	;
	
procedure_expression=
	TOKEN_IDENTIFIER.i TOKEN_LPAR expression_part.args TOKEN_RPAR {:
		TypeFunct type = (TypeFunct)procedureEnvironment.get(i);
		if (type == null) System.err.println();
		return new NodeCallFct(i, type, args);
	:}
	;
	
expression_part=
	/* empty */
	| expression_list
	;
	
expression_list=
	expression_list.el TOKEN_COMMA expression.e {: el.add(e); return el; :}
	| expression.e {: NodeList el = new NodeList(e); return el; :}
	;
	
new_statement=
	TOKEN_NEW variable_access.va TOKEN_SEMIC {: return new NodeNew(va); :}
	;
	
dispose_statement=
	TOKEN_DISPOSE variable_access.va TOKEN_SEMIC {: return new NodeDispose(va); :}
	;
	
println_statement=
	TOKEN_PRINTLN.func expression.e TOKEN_SEMIC {: return new NodeCallFct(func, new TypeFunct("println", new TypeTuple(new TypeFeature("e", e.getType())), new TypeVoid()), new NodeList(e)); :}
	;	
	
readln_statement=
	TOKEN_READLN.func expression.e TOKEN_SEMIC  {: return new NodeCallFct(func, new TypeFunct("readln", new TypeTuple(new TypeFeature("e", e.getType())), new TypeVoid()), new NodeList(e)); :}
	;
	
return_statement=
	TOKEN_RETURN expression.e TOKEN_SEMIC {: return new NodeReturn(e); :}
	;
	
structured_statement=
	block.stm
	| if_statement.stm 
	| while_statement.stm 
	| switch_statement
	;

if_statement=
   	TOKEN_IF expression.e TOKEN_THEN statement.stm {: return new NodeIf(e, stm); :}
    | TOKEN_IF expression.e TOKEN_THEN statement.stm1 TOKEN_ELSE statement.stm2 {: return new NodeIf(e, stm1, stm2); :}
    ;

while_statement=
	TOKEN_WHILE expression.e TOKEN_DO statement.stm {: return new NodeWhile(e, stm); :}
	;
	
switch_statement=
	TOKEN_SWITCH expression.e TOKEN_BEGIN case_statement_list.stms TOKEN_END {:
		return new NodeSwitch(e, stms);
	:}
	;
	
case_statement_list=
	case_statement_list.lst case_statement.stms case_default.def {: 
		Iterator<Node> it = stms.iterator();
		while (it.hasNext()) {
			lst.add(it.next());
		}
		lst.add(def);
		return lst;
	:}
	| case_statement.stms {: return stms; :}
	;
	
case_statement=
	TOKEN_CASE identifier_list.idList TOKEN_COLON statement.stm {: 
		NodeList cases = new NodeList();
		for (String i : idList) {
			cases.add(new NodeCase(i, stm));
		}
		return cases;
	:}
	;
	
case_default=
	/* empty */
	| TOKEN_DEFAULT TOKEN_COLON statement.stm {: return new NodeCase(stm); :}
	;
		
variable_access=
	TOKEN_IDENTIFIER.i {: 
		Type type = stackEnvironment.getType(i);
		if (type == null) 
			throw new UnknownVariableException("Variable doesn't exist : " + i);
		if (type instanceof TypeTemplate) { // replace TypeTemplate by their real type
			String name = ((TypeTemplate)type).getName();
			type = (Type)typeEnvironment.get(name);
			if (type == null)
				throw new UnknownTypeException("Type variable doesn't exist : " + name);
		}
		NodeId id = new NodeId(i, type);
		id.setTemp(!(stackEnvironment.isGlobal(i))); // non-global variable are "temporary"
		return id; 
	:} 
	| variable_access.va TOKEN_LBRACKET expression.e TOKEN_RBRACKET {: 
		if (!(va.getType() instanceof TypeComplex))
			throw new IllegalOperationException("Must be TypeArray");
		return new NodeArrayAccess(va, e); 
	:}
	| expression.e TOKEN_CIRC {: return new NodePtrAccess(e); :}
	;

expression=
	expression.a TOKEN_PLUS expression.b {: return new NodeOp(NodeOp.Operation.PLUS, a, b); :}
	| expression.a TOKEN_MINUS expression.b {: return new NodeOp(NodeOp.Operation.MINUS, a, b); :}
	| expression.a TOKEN_TIMES expression.b {: return new NodeOp(NodeOp.Operation.MUL, a, b); :}
	| expression.a TOKEN_DIV expression.b {: return new NodeOp(NodeOp.Operation.DIV, a, b); :}
	| TOKEN_MINUS expression.a @ UNARY_MINUS {: return new NodeOp(NodeOp.Operation.MINUS, a); :}
	| expression.a TOKEN_OR expression.b {: return new NodeOp(NodeOp.Operation.OR, a, b); :}
	| expression.a TOKEN_AND expression.b {: return new NodeOp(NodeOp.Operation.AND, a, b); :}
	| TOKEN_NOT expression.a {: return new NodeRel(NodeRel.BinaryRel.EQ, a, new NodeLiteral(new TypeBoolean(), false)); :}
	| expression.a TOKEN_LT expression.b {: return new NodeRel(NodeRel.BinaryRel.LT, a, b); :}
	| expression.a TOKEN_LE expression.b {: return new NodeRel(NodeRel.BinaryRel.LE, a, b); :}
	| expression.a TOKEN_GT expression.b {: return new NodeRel(NodeRel.BinaryRel.GT, a, b); :}
	| expression.a TOKEN_GE expression.b {: return new NodeRel(NodeRel.BinaryRel.GE, a, b); :}
	| expression.a TOKEN_EQ expression.b {: return new NodeRel(NodeRel.BinaryRel.EQ, a, b); :}
	| expression.a TOKEN_NE expression.b {: return new NodeRel(NodeRel.BinaryRel.NE, a, b); :}
	| TOKEN_LPAR expression.e TOKEN_RPAR {: return e; :}
	| procedure_expression.e {: return e; :}
	| variable_access.va {: return va; :}
	| literal.t {: return t; :}
	;
	
literal=
	TOKEN_LIT_INTEGER.i {: return new NodeLiteral(new TypeInt(i), i); :}
	| TOKEN_LIT_STRING.s {: return new NodeLiteral(new TypeString(), s); :}
	| TOKEN_TRUE {: return new NodeLiteral(new TypeBoolean(), true); :}
	| TOKEN_FALSE {: return new NodeLiteral(new TypeBoolean(), false); :}
	| TOKEN_NULL {: return new NodeLiteral(new TypePointer(), null); :}
	;