%package "ubordeaux.deptinfo.compilation.project.main";
%class "ParserLea";
%import "ubordeaux.deptinfo.compilation.project.node.*";
%import "ubordeaux.deptinfo.compilation.project.type.*";
%import "ubordeaux.deptinfo.compilation.project.environment.*";
%import "java.util.ArrayList";
%import "java.util.Iterator";

%embed {: 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
			System.err.format("*** " + msg + " ligne %d, colonne %d\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()));
		}
		
	private Environment typeEnvironment = new Environment("types");
	private Environment procedureEnvironment = new Environment("procedures");
	private Environment globalEnvironment = new Environment("globals");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;
	
:};

%init {: 
	report = new Events();
:};

// KEYWORDS
%terminals TOKEN_TYPE, TOKEN_STRING, TOKEN_INTEGER, TOKEN_BOOLEAN, TOKEN_ARRAY, TOKEN_OF, TOKEN_STRUCT;
%terminals TOKEN_VAR, TOKEN_PROCEDURE, TOKEN_FUNCTION, TOKEN_BEGIN, TOKEN_END, TOKEN_NEW, TOKEN_DISPOSE;
%terminals TOKEN_PRINTLN, TOKEN_READLN, TOKEN_RETURN, TOKEN_IF, TOKEN_THEN, TOKEN_ELSE, TOKEN_WHILE, TOKEN_DO;
%terminals TOKEN_SWITCH, TOKEN_CASE, TOKEN_DEFAULT;

// PONCTS
%terminals TOKEN_SEMIC, TOKEN_DOTDOT, TOKEN_COLON, TOKEN_COMMA;
%terminals TOKEN_LPAR, TOKEN_RPAR, TOKEN_LBRACKET, TOKEN_RBRACKET, TOKEN_LBRACE, TOKEN_RBRACE;

// OPERATORS
%terminals TOKEN_AFF, TOKEN_CIRC;
%terminals TOKEN_PLUS, TOKEN_MINUS, TOKEN_TIMES, TOKEN_DIV;
%terminals TOKEN_AND, TOKEN_OR, TOKEN_NOT;
%terminals TOKEN_LT, TOKEN_LE, TOKEN_GT, TOKEN_GE, TOKEN_EQ, TOKEN_NE;

// LITERALS
%terminals TOKEN_IDENTIFIER, TOKEN_LIT_INTEGER, TOKEN_LIT_STRING, TOKEN_TRUE, TOKEN_FALSE, TOKEN_NULL;

%right TOKEN_IF;
%right TOKEN_ELSE;
%left TOKEN_TIMES, TOKEN_DIV;
%left TOKEN_PLUS, TOKEN_MINUS;
%left TOKEN_NOT;
%left TOKEN_AND;
%left TOKEN_OR;
%left TOKEN_LT, TOKEN_GT, TOKEN_GE, TOKEN_LE;
%left TOKEN_EQ, TOKEN_NE;

%typeof TOKEN_LIT_INTEGER = "Integer";
%typeof TOKEN_LIT_STRING, TOKEN_IDENTIFIER = "String";
%typeof TOKEN_TRUE, TOKEN_FALSE = "Boolean";
%typeof TOKEN_NULL = "TypeVoid";
%typeof TOKEN_INTEGER = "TypeInt";
%typeof TOKEN_STRING = "TypeString";
%typeof TOKEN_BOOLEAN = "TypeBoolean";

%typeof type = "Type";
%typeof simple_type = "TypeAtomic";
%typeof array_type = "TypeArray";
%typeof range_type, subrange_type = "TypeRange";
%typeof pointer_type = "TypePointer";
%typeof structure_type = "TypeStruct";
%typeof feature_list_type = "TypeFeatureList";
%typeof feature_type, argt = "TypeFeature";
%typeof argt_list = "TypeTuple";
%typeof type_declaration, named_type = "TypeNamed";
%typeof identifier_list = "IdentifierList";

%typeof statement, structured_statement = "Node";
%typeof new_statement = "NodeNew";
%typeof dispose_statement = "NodeDispose";
%typeof return_statement = "NodeReturn";
%typeof if_statement = "NodeIf";
%typeof while_statement = "NodeWhile";
%typeof switch_statement = "NodeSwitch";
%typeof case_statement_list = "NodeCaseList";
%typeof case_statement, case_default = "NodeCase";
%typeof variable_access, expression = "NodeExp";
%typeof expression_list, variable_declaration, variable_declaration_list = "NodeList";
%typeof variable_declaration_part, type_declaration_part, procedure_definition_part = "NodeList";
%typeof statement_list, block, program = "NodeList";
%typeof literal = "NodeLiteral";

%goal program;

/***
* Semantique A completer
*
* Quelques astuces:
*
* a) ne mettez jamais de lettres accentuees, Beaver ne fonctionnerait pas
*
* b) quand vous souhaitez mettre du code avant la fin de la regle, 
*     X= A {: je voudrais mettre du code ici :} B {: pour l'exploiter ici :}
* utilisez une rege vide comme ceci:
*
*     X= A empty_X B {: pour l'exploiter ici  :} ;
*     empty_X= {: je voudrais mettre du code ici :};
*
* c) pour implementer une liste, faites comme ceci:
* xxx_list=
*	xxx_list.list xxx.elt {: list.add(elt); return list; :}
*	| xxx.elt {: MyList list = new MyList(); list.add(elt); return list; :}
*	;
*	
*
***/

program=
	type_declaration_part
	variable_declaration_part 
	procedure_definition_part
	TOKEN_BEGIN
	statement_list
	TOKEN_END
	;
	
type_declaration_part= 
	/* empty */	
	| TOKEN_TYPE type_declaration_list
	;
	
type_declaration_list=
	type_declaration_list type_declaration
	| type_declaration
	;
	
type_declaration=
	type_declaration_head.th TOKEN_AFF type.t TOKEN_SEMIC {: typeEnvironment.put(th, t); return new TypeNamed(th); :}
	;
	
type_declaration_head=
	TOKEN_IDENTIFIER
	;
	
type=
	simple_type
	| named_type		
	| index_type
	| array_type
	| pointer_type
	| structure_type
	;
	
simple_type=
	TOKEN_STRING	
	| TOKEN_INTEGER
	| TOKEN_BOOLEAN
	;
	
named_type=
	TOKEN_IDENTIFIER
	;
	
index_type=
	enumerated_type
	| subrange_type
	;
	
enumerated_type=
	init_enumerated_type TOKEN_LPAR identifier_list TOKEN_RPAR 
	;
	
init_enumerated_type=
	;

subrange_type= 
	TOKEN_LIT_INTEGER TOKEN_DOTDOT TOKEN_LIT_INTEGER 
	| TOKEN_IDENTIFIER TOKEN_DOTDOT TOKEN_IDENTIFIER	
	;
	
array_type=
	TOKEN_ARRAY TOKEN_LBRACKET range_type TOKEN_RBRACKET TOKEN_OF type 
	;
	
range_type=
	enumerated_type
	| subrange_type
	| named_type	
	;
	
pointer_type=
	TOKEN_CIRC type.t {: return new TypePointer(t); :}
	;
	
structure_type=
	TOKEN_STRUCT TOKEN_LBRACE feature_list_type TOKEN_RBRACE
	;
	
feature_list_type=
	feature_list_type.l feature_type.t {: l.add(t); return l; :}
	| feature_type.t {: TypeFeatureList l = new TypeFeatureList(t); return l; :}
	;
	
feature_type=
	TOKEN_IDENTIFIER.i TOKEN_COLON type.t TOKEN_SEMIC {: return new TypeFeature(i, t); :}
	;
	
variable_declaration_part= 
	/* empty */ 
	| TOKEN_VAR variable_declaration_list.l {: return l; :} 
	;
	
variable_declaration_list=
	variable_declaration_list.l variable_declaration.d {: l.add(d); return l; :}
	| variable_declaration.d {: NodeList l = new NodeList(d); return l; :}
	;
	
variable_declaration=
	identifier_list.l TOKEN_COLON type.t TOKEN_SEMIC 
	{:
		NodeList decl = new NodeList();
		for (String i : l) {
			NodeLiteral var = new  NodeLiteral(t, null);
			globalEnvironment.put(i, var);
			decl.add(var);
		}
		return decl;
	:}
	;
	
identifier_list=
	identifier_list.l TOKEN_COMMA TOKEN_IDENTIFIER.i {: l.add(i); return l; :}
	| TOKEN_IDENTIFIER.i {: IdentifierList l = new IdentifierList(i); return l; :}
	;
	
procedure_definition_part=
	| procedure_definition_list
	;
	
procedure_definition_list=
	procedure_definition_list procedure_definition
	| procedure_definition
	;
	
procedure_definition=
	procedure_definition_head block
	| procedure_declaration_head TOKEN_SEMIC
	;

procedure_definition_head=
	procedure_head 
	;
	
procedure_declaration_head=
	procedure_head 
	;
	
procedure_head=
	TOKEN_PROCEDURE TOKEN_IDENTIFIER TOKEN_LPAR argt_part TOKEN_RPAR 
	| TOKEN_FUNCTION TOKEN_IDENTIFIER TOKEN_LPAR argt_part TOKEN_RPAR TOKEN_COLON type
	;
	
argt_part=
	/* empty */
	| argt_list
	;
	
argt_list=
	argt_list.lt TOKEN_COMMA argt.t {: lt.add(t); return lt;  :}
	| argt.t {: TypeTuple nl = new TypeTuple(t); return nl; :}
	;
	
argt=
	TOKEN_IDENTIFIER.i TOKEN_COLON type.t {: return new TypeFeature(i, t); :}
	;
	
block=
	variable_declaration_part /** TODO: add to tree **/
	TOKEN_BEGIN	
	statement_list.stmList
	TOKEN_END 			
	{: return stmList; :}		
	;

statement_list=
	statement_list.stmList statement.stm {: stmList.add(stm); return stmList; :}
	| statement.stm {: NodeList stmList = new NodeList(stm); return stmList; :}
	;
	
statement=
	simple_statement.stm {: return stm; :}
	| structured_statement.stm {: return stm; :}
	;
	
simple_statement=
	assignment_statement.stm {: return stm; :}
	| procedure_statement
	| new_statement
	| dispose_statement
	| println_statement
	| readln_statement
	| return_statement
	;
	
assignment_statement=
	variable_access.va TOKEN_AFF expression.e TOKEN_SEMIC {: return new NodeAssign(va, e); :}
	;
	
procedure_statement=
	procedure_expression TOKEN_SEMIC
	;
	
procedure_expression=
	TOKEN_IDENTIFIER TOKEN_LPAR expression_part TOKEN_RPAR
	;
	
expression_part=
	/* empty */
	| expression_list
	;
	
expression_list=
	expression_list.el TOKEN_COMMA expression.e {: el.add(e); return el; :}
	| expression.e {: NodeList el = new NodeList(e); return el; :}
	;
	
new_statement=
	TOKEN_NEW variable_access.va TOKEN_SEMIC {: return new NodeNew(va); :}
	;
	
dispose_statement=
	TOKEN_DISPOSE variable_access.va TOKEN_SEMIC {: return new NodeDispose(va); :}
	;
	
println_statement=
	TOKEN_PRINTLN expression.e TOKEN_SEMIC 
	;	
	
readln_statement=
	TOKEN_READLN expression.e TOKEN_SEMIC  
	;
	
return_statement=
	TOKEN_RETURN expression.e TOKEN_SEMIC {: return new NodeReturn(e); :}
	;
	
structured_statement=
	block.stm {: return stm; :}
	| if_statement
	| while_statement.stm {: return stm; :}
	| switch_statement
	;
	
if_statement=
	TOKEN_IF expression TOKEN_THEN statement
	| TOKEN_IF expression TOKEN_THEN statement TOKEN_ELSE statement
	;
	
while_statement=
	TOKEN_WHILE expression.e TOKEN_DO statement.stm {: return new NodeWhile(e, stm); :}
	;
	
switch_statement=
	TOKEN_SWITCH expression TOKEN_BEGIN case_statement_list TOKEN_END
	;
	
case_statement_list=
	case_statement_list case_statement case_default
	| case_statement						
	;
	
case_statement=
	TOKEN_CASE identifier_list TOKEN_COLON statement 	
	;
	
case_default=
	/* empty */
	| TOKEN_DEFAULT TOKEN_COLON statement
	;
		
variable_access=
	TOKEN_IDENTIFIER.i {: return new NodeId(i, new TypeVoid()); :} /** need verification **/
	| variable_access.va TOKEN_LBRACKET expression.e TOKEN_RBRACKET {: return new NodeArrayAccess(va, e); :}
	| expression.e TOKEN_CIRC {: return new NodePtrAccess(e); :}
	;
	
expression=
	expression.a TOKEN_PLUS expression.b {: return new NodeOp("PLUS", a, b); :}
	| expression.a TOKEN_MINUS expression.b {: return new NodeOp("MINUS", a, b); :}
	| expression.a TOKEN_TIMES expression.b {: return new NodeOp("TIMES", a, b); :}
	| expression.a TOKEN_DIV expression.b {: return new NodeOp("DIV", a, b); :}
	| TOKEN_MINUS expression
	| expression TOKEN_OR expression
	| expression TOKEN_AND expression
	| TOKEN_NOT expression
	| expression.a TOKEN_LT expression.b {: return new NodeRel("LT", a, b); :} 
	| expression.a TOKEN_LE expression.b {: return new NodeRel("LE", a, b); :}
	| expression.a TOKEN_GT expression.b {: return new NodeRel("GT", a, b); :}
	| expression.a TOKEN_GE expression.b {: return new NodeRel("GE", a, b); :}
	| expression.a TOKEN_EQ expression.b {: return new NodeRel("EQ", a, b); :}
	| expression.a TOKEN_NE expression.b {: return new NodeRel("NE", a, b); :}
	| TOKEN_LPAR expression.e TOKEN_RPAR {: return e; :}
	| procedure_expression
	| variable_access.va {: return va; :}
	| literal.t {: return t; :}
	;
	
literal=
	TOKEN_LIT_INTEGER.i {: return new NodeLiteral(new TypeInt(i), i); :}
	| TOKEN_LIT_STRING.s {: return new NodeLiteral(new TypeString(), s); :}
	| TOKEN_TRUE {: return new NodeLiteral(new TypeBoolean(), true); :}
	| TOKEN_FALSE {: return new NodeLiteral(new TypeBoolean(), false); :}
	| TOKEN_NULL {: return new NodeLiteral(new TypeVoid(), null); :}
	;